import os
import csv
import subprocess
import re
import time
import shutil
import sys

def run_command(command):
    """Run a shell command and return its output and error messages."""
    result = subprocess.run(command, shell=True, text=True, capture_output=True)
    print(f"Running command: {command}")
    print("Output:")
    print(result.stdout)
    if result.stderr:
        print("Errors:")
        print(result.stderr)
    return result.stdout, result.stderr

def count_tokens(file_path):
    """Count the number of tokens in a file."""
    with open(file_path, 'r') as file:
        content = file.read()
    return len(content.split())

def count_functions(file_path):
    """Count the number of functions in a Solidity file."""
    with open(file_path, 'r') as file:
        content = file.read()
    return len(re.findall(r'function\s+\w+\s*\(', content))

def measure_time(command):
    """Measure the execution time of a command."""
    start_time = time.time()
    stdout, stderr = run_command(command)
    end_time = time.time()
    return end_time - start_time, stdout, stderr

def get_next_directory(base_dir):
    """Get the next available directory number."""
    if not os.path.exists(base_dir):
        os.makedirs(base_dir)
    existing_dirs = [d for d in os.listdir(base_dir) if os.path.isdir(os.path.join(base_dir, d))]
    existing_nums = [int(d.replace('smart', '')) for d in existing_dirs if d.startswith('smart')]
    next_num = max(existing_nums, default=0) + 1
    return os.path.join(base_dir, f"smart{next_num}")

def store_file(src, dest_dir, filename):
    """Store a copy of the file in the destination directory."""
    if not os.path.exists(dest_dir):
        os.makedirs(dest_dir)
    shutil.copy(src, os.path.join(dest_dir, filename))

def main(consider_option):
    sol_file = "ext_changed.sol"
    original_sol_file = "original_ext_changed.sol"
    shutil.copy(sol_file, original_sol_file)  # Backup the original file

    results = []

    base_dir = './Solidity'
    dest_dir = get_next_directory(base_dir)

    # Initial commands
    run_command("python3 delete_comments.py")
    run_command(f"slither {sol_file} --print call-graph")
    run_command("python3 nodes.py")

    # Store initial sol file
    initial_sol_file = os.path.join(dest_dir, "before_initial_ext_changed.sol")
    store_file(sol_file, dest_dir, "before_initial_ext_changed.sol")

    # Scripts to run
    scripts = [
        ("top_down_bfs.py", "TOP_DOWN BFS_TIME"),
        ("down_top_bfs.py", "DOWN_TOP BFS_TIME"),
        ("dd_final.py", "DD_TIME"),
        ("hdd_final.py", "HDD_DOWN_TOP_TIME"),
        ("hdd_top_down.py", "HDD_TOP_DOWN TIME")
    ]

    for script, time_label in scripts:
        shutil.copy(original_sol_file, sol_file)  # Restore the original file before running each script
        run_command("python3 delete_comments.py")  # Ensure comments are deleted before running each script
        # Measure time for each script execution
        time_taken, stdout, stderr = measure_time(f'python3 {script} --consider "{consider_option}"')
        tokens = count_tokens(sol_file)
        functions = count_functions(sol_file)
        after_script_sol_file = os.path.join(dest_dir, f"after_{script}_ext_changed.sol")
        store_file(sol_file, dest_dir, f"after_{script}_ext_changed.sol")
        # Record results separately for each script
        results.append([script, time_taken, tokens, functions])

        # Print output and error messages
        print(f"Output of {script}:")
        print(stdout)
        if stderr:
            print(f"Errors from {script}:")
            print(stderr)

    # Copy solidity.sh and solidity2.sh to the destination directory
    solidity_script_1 = "solidity.sh"
    solidity_script_2 = "solidity2.sh"
    store_file(solidity_script_1, dest_dir, solidity_script_1)
    store_file(solidity_script_2, dest_dir, solidity_script_2)

    # Copy initial sol file to destination directory
    store_file(original_sol_file, dest_dir, "ext_changed.sol")
    initial_sol_file_in_dest = os.path.join(dest_dir, "ext_changed.sol")

    # Run java command on the file generated by dd_final.py with solidity.sh
    dd_final_sol_file = os.path.join(dest_dir, "after_hdd_final.py_ext_changed.sol")
    java_time_1, java_stdout_1, java_stderr_1 = measure_time(f'java -jar perses_deploy.jar --test-script {os.path.join(dest_dir, solidity_script_1)} --input-file {dd_final_sol_file}')
    
    # Assume output file is generated as perses_result/after_dd_final.py_ext_changed.sol
    dd_final_processed_sol_file = os.path.join(dest_dir, "perses_result/after_hdd_final.py_ext_changed.sol")
    java_tokens_1 = count_tokens(dd_final_processed_sol_file)
    java_functions_1 = count_functions(dd_final_processed_sol_file)
    results.append(["java_perses_deploy_after_dd_final_with_solidity", java_time_1, java_tokens_1, java_functions_1])

    # Print output and error messages from Java command with solidity.sh
    print("Output of java_perses_deploy_after_hdd_final_with_solidity:")
    print(java_stdout_1)
    if java_stderr_1:
        print("Errors from java_perses_deploy_after_hdd_final_with_solidity:")
        print(java_stderr_1)

    # Java command on initial sol file with solidity2.sh
    java_time_2, java_stdout_2, java_stderr_2 = measure_time(f'java -jar perses_deploy.jar --test-script {os.path.join(dest_dir, solidity_script_2)} --input-file {initial_sol_file_in_dest}')
    
    csv_file = os.path.join(dest_dir, 'results.csv')
    with open(csv_file, 'w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(["Script", "Execution Time", "Number of Tokens", "Number of Functions"])
        writer.writerows(results)

    # Assume output file is generated as perses_result_1/ext_changed.sol
    initial_processed_sol_file = os.path.join(dest_dir, "perses_result_1/ext_changed.sol")
    java_tokens_2 = count_tokens(initial_processed_sol_file)
    java_functions_2 = count_functions(initial_processed_sol_file)
    results.append(["java_perses_deploy_initial_with_solidity2", java_time_2, java_tokens_2, java_functions_2])

    # Print output and error messages from initial Java command with solidity2.sh
    print("Output of java_perses_deploy_initial_with_solidity2:")
    print(java_stdout_2)
    if java_stderr_2:
        print("Errors from java_perses_deploy_initial_with_solidity2:")
        print(java_stderr_2)

    # Write results to CSV
    csv_file = os.path.join(dest_dir, 'results.csv')
    with open(csv_file, 'w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(["Script", "Execution Time", "Number of Tokens", "Number of Functions"])
        writer.writerows(results)

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python3 run_and_store.py '<consider_option>'")
        sys.exit(1)
    consider_option = sys.argv[1]
    main(consider_option)

